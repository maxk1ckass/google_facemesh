{"id":"index.html","dependencies":[{"name":"./index.js","dynamic":true,"resolved":"c:\\max\\tfjs-models\\facemesh\\demo\\index.js","parent":"c:\\max\\tfjs-models\\facemesh\\demo\\index.html"},{"name":"c:\\max\\tfjs-models\\facemesh\\demo\\.babelrc","includedInParent":true,"mtime":1590797187499},{"name":"c:\\max\\tfjs-models\\facemesh\\demo\\package.json","includedInParent":true,"mtime":1590915878799}],"generated":{"html":"<!-- Copyright 2020 Google LLC. All Rights Reserved.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n==============================================================================-->\r\n\r\n<head>\r\n  <!-- Load three.js -->\r\n  <script src=\"https://cdn.jsdelivr.net/npm/three@0.106.2/build/three.min.js\"></script>\r\n  <!-- Load scatter-gl.js -->\r\n  <script src=\"https://cdn.jsdelivr.net/npm/scatter-gl@0.0.1/lib/scatter-gl.min.js\"></script>\r\n  <style>.canvas-wrapper,\r\n    #scatter-gl-container {\r\n      display: inline-block;\r\n      vertical-align: top;\r\n    }\r\n\r\n    #scatter-gl-container {\r\n      border: solid 1px black;\r\n      position: relative;\r\n    }\r\n\r\n    /* center the canvas within its wrapper */\r\n    #scatter-gl-container canvas {\r\n      transform: translate3d(-50%, -50%, 0);\r\n      left: 50%;\r\n      top: 50%;\r\n      position: absolute;\r\n    }\r\n\r\n    /* Chrome, Safari, Edge, Opera */\r\n    input::-webkit-outer-spin-button,\r\n    input::-webkit-inner-spin-button {\r\n      -webkit-appearance: none;\r\n      margin: 0;\r\n    }\r\n\r\n    /* Firefox */\r\n    input[type=\"number\"] {\r\n      -moz-appearance: textfield;\r\n    }\r\n\r\n    .green {\r\n      color: #008000;\r\n    }\r\n\r\n    #main {\r\n      max-width: 1000px;\r\n      margin: auto;\r\n    }\r\n\r\n    button {\r\n      cursor: pointer;\r\n    }\r\n\r\n    #controls {\r\n      margin: 10px auto;\r\n      text-align: center;\r\n    }\r\n\r\n    #controls button {\r\n      font-size: 20px;\r\n      padding: 5px;\r\n    }\r\n\r\n    #controls input {\r\n      width: 60px;\r\n    }\r\n\r\n    #controls input::placeholder {\r\n      font-size: 12px;\r\n    }\r\n\r\n    .canvas-wrapper.capture canvas {\r\n      width: 400px;\r\n      height: 400px;\r\n    }\r\n\r\n    #capture-predictions {\r\n      width: 400px;\r\n      height: 400px;\r\n      overflow-y: scroll;\r\n    }</style>\r\n  <script>// trigger a download\nfunction downloadURI(uri, name) {\n  let link = document.createElement(\"a\");\n  link.download = name;\n  link.href = uri;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n}\n\nfunction downloadJson(json) {\n  // get data url\n  function jsonToDataURL(json) {\n    return `data:application/json;base64,${btoa(JSON.stringify(json, null, 2))}`;\n  } // check if the response carries any binary,\n  // if yes, download it (or all of them if there're multiple binaries)\n\n\n  try {\n    let dataUrl = jsonToDataURL(json);\n    downloadURI(dataUrl, `predictions-${Date.now()}.json`);\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction matrixDot(A, B) {\n  var result = new Array(A.length).fill(0).map(row => new Array(B[0].length).fill(0));\n  return result.map((row, i) => {\n    return row.map((val, j) => {\n      return A[i].reduce((sum, elm, k) => sum + elm * B[k][j], 0);\n    });\n  });\n}\n\nfunction matrixDivide(A, number) {\n  var result = new Array(A.length).fill(0).map(row => new Array(A[0].length).fill(0));\n  return result.map((row, i) => {\n    return row.map((val, j) => {\n      return A[i][j] / number;\n    });\n  });\n}\n\nfunction downloadObj(json, useScaledMesh = false, customScales = null) {\n  // get data url\n  function jsonToDataURL(json) {\n    let {\n      mesh,\n      scaledMesh,\n      f\n    } = json; // choose a mesh and apply scales\n\n    let m = useScaledMesh ? scaledMesh : mesh;\n    console.log(\"before custom scale:\", m);\n\n    if (customScales) {\n      m = matrixDot(m, customScales);\n      console.log(\"after customScaling:\", m);\n    } // write scales\n\n\n    let vertices = (m ? m : []).map(triple => `v ${triple[0]} ${triple[1]} ${triple[2]}`);\n    let objContent = \"\";\n    objContent += vertices.join(\"\\n\"); // write triangles\n\n    let face = (f ? f : []).map(points => `f ${points[0] + 1} ${points[1] + 1} ${points[2] + 1}`);\n    objContent += \"\\n\" + face.join(\"\\n\");\n    return `data:text/plain;base64,${btoa(objContent)}`;\n  } // check if the response carries any binary,\n  // if yes, download it (or all of them if there're multiple binaries)\n\n\n  try {\n    let dataUrl = jsonToDataURL(json);\n    let filetype = customScales ? `-scaled[${customScales[0][0]},${customScales[1][1]}]` : useScaledMesh ? \"-scaled\" : \"\";\n    downloadURI(dataUrl, `facemesh${filetype}-${Date.now()}.obj`);\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nconst clearCanvas = canvas => {\n  let ctx = canvas.getContext(\"2d\");\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n};\n\nconst drawText = canvas => {\n  let ctx = canvas.getContext(\"2d\");\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.font = \"48px serif\";\n  ctx.fillText(\"Average values =>\", 200, 200);\n};\n\nwindow.saveCapturePredictionsJson = () => {\n  downloadJson(window.capturePredictionData);\n};\n\nwindow.saveCapturePredictionsObj = (scaled = true) => {\n  downloadObj(window.capturePredictionData, scaled, null);\n};\n\nwindow.saveCapturePredictionsCustomeObj = () => {\n  let scaleX = document.querySelector(\"#scale-x\").value;\n  let scaleY = document.querySelector(\"#scale-y\").value;\n  scaleX = scaleX ? parseFloat(scaleX) : 1;\n  scaleY = scaleY ? parseFloat(scaleY) : 1;\n  const customScales = [[scaleX, 0, 0], [0, scaleY, 0], [0, 0, 1]];\n  downloadObj(window.capturePredictionData, false, customScales);\n};\n\nwindow.singleCapture = () => {\n  // reset mesh data\n  window.capturePredictionData = {};\n  window.capturedFrameCount = 0; // set capture flag\n\n  window.captureNextFrame = true;\n};\n\nwindow.continuousCapture = () => {\n  let duration = document.querySelector(\"#duration\").value;\n  let fps = document.querySelector(\"#fps\").value;\n  duration = duration ? parseFloat(duration) : 5;\n  fps = fps ? parseFloat(fps) : 10; // reset mesh data\n\n  window.capturePredictionData = {};\n  window.capturedFrameCount = 0; // start the timeout\n\n  window.endContinuousCapture = new Date(Date.now() + duration * 1000);\n  let interval = window.setInterval(() => {\n    if (new Date() > window.endContinuousCapture) {\n      clearInterval(interval);\n      setTimeout(() => {\n        // get average values\n        window.capturePredictionData.mesh = matrixDivide(window.capturePredictionData.mesh, window.capturedFrameCount);\n        window.capturePredictionData.scaledMesh = matrixDivide(window.capturePredictionData.scaledMesh, window.capturedFrameCount); // show average values\n\n        drawText(document.querySelector(\"#capture-scatter-gl\"));\n        clearCanvas(document.querySelector(\"#capture-frame\"));\n        document.querySelector(\"#capture-predictions\").innerHTML = JSON.stringify(window.capturePredictionData, null, 2);\n      }, 500);\n    } else {\n      window.captureNextFrame = true;\n    }\n  }, parseInt(1000 / fps));\n};</script>\r\n</head>\r\n<body>\r\n  <div id=\"main\">\r\n    <div class=\"container\">\r\n      <div class=\"canvas-wrapper\">\r\n        <canvas id=\"output\"></canvas>\r\n        <video id=\"video\" playsinline=\"\" style=\"\r\n            -webkit-transform: scaleX(-1);\r\n            transform: scaleX(-1);\r\n            visibility: hidden;\r\n            width: auto;\r\n            height: auto;\r\n          \"></video>\r\n      </div>\r\n      <div id=\"scatter-gl-container\"></div>\r\n    </div>\r\n\r\n    <!-- controls -->\r\n    <hr>\r\n    <div id=\"controls\" class=\"buttons\">\r\n      First\r\n      <button class=\"green\" onclick=\"window.singleCapture();\">\r\n        Capture\r\n      </button>\r\n      &nbsp;Or\r\n      <input id=\"duration\" type=\"number\" placeholder=\"sec(5)\">\r\n      <input id=\"fps\" type=\"number\" placeholder=\"fps(10)\">\r\n      <button class=\"green\" onclick=\"window.continuousCapture();\">\r\n        Cont Capture\r\n      </button>\r\n      Then &nbsp;<button onclick=\"window.saveCapturePredictionsObj(false);\">\r\n        Save OBJ\r\n      </button>\r\n      &nbsp;<button onclick=\"window.saveCapturePredictionsObj(true);\">\r\n        Scaled OBJ\r\n      </button>\r\n      &nbsp;Or\r\n      <input id=\"scale-x\" type=\"number\" placeholder=\"scaleX(1)\">\r\n      <input id=\"scale-y\" type=\"number\" placeholder=\"scaleY(1)\">\r\n      <button onclick=\"window.saveCapturePredictionsCustomeObj();\">\r\n        Custom OBJ\r\n      </button>\r\n    </div>\r\n\r\n    <!-- capture content -->\r\n    <div class=\"container\">\r\n      <div class=\"canvas-wrapper capture\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Captured Frame</th>\r\n              <th>Captured Scatter GL</th>\r\n              <th>\r\n                Predictions &nbsp;<button onclick=\"window.saveCapturePredictionsJson();\">\r\n                  Save JSON\r\n                </button>\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>\r\n                <canvas id=\"capture-frame\"></canvas>\r\n              </td>\r\n              <td>\r\n                <canvas id=\"capture-scatter-gl\"></canvas>\r\n              </td>\r\n              <td>\r\n                <pre id=\"capture-predictions\"></pre>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</body>\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.7.6/dat.gui.min.js\"></script>\r\n<script src=\"/168726dbe96b3ce427e7fedce31bb0bc.js\"></script>\r\n"},"sourceMaps":null,"error":null,"hash":"45d3436047a1879ca25218843b86ab7a","cacheData":{"env":{}}}